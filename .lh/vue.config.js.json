{
    "sourceFile": "vue.config.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1646380540063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1646381193635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,19 +1,1 @@\n-{\r\n-  \"compilerOptions\": {\r\n-    \"target\": \"es5\",\r\n-      \"module\": \"esnext\",\r\n-        \"baseUrl\": \"./\",\r\n-          \"moduleResolution\": \"node\",\r\n-            \"paths\": {\r\n-      \"@/*\": [\r\n-        \"src/*\"\r\n-      ]\r\n-    },\r\n-    \"lib\": [\r\n-      \"esnext\",\r\n-      \"dom\",\r\n-      \"dom.iterable\",\r\n-      \"scripthost\"\r\n-    ]\r\n-  }\r\n-}\r\n+vue.config.js\n\\ No newline at end of file\n"
                },
                {
                    "date": 1646381212427,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,103 @@\n-vue.config.js\n\\ No newline at end of file\n+module.exports = {\r\n+  // 项目部署的基础路径\r\n+  publicPath: './',\r\n+\r\n+  // 将构建好的文件输出到哪里（或者说将编译的文件）\r\n+  outputDir: 'dist',\r\n+\r\n+  // 放置静态资源的地方 (js/css/img/font/...)\r\n+  assetsDir: '',\r\n+\r\n+  // 用于多页配置，默认是 undefined\r\n+  pages: {\r\n+    index: {\r\n+      // 入口文件\r\n+      entry: 'src/main.js',　　/*这个是根入口文件*/\r\n+      // 模板文件\r\n+      template: 'public/index.html',\r\n+      // 输出文件\r\n+      filename: 'index.html',\r\n+      // 页面title\r\n+      title: 'Index Page'\r\n+    },\r\n+    // 简写格式\r\n+    // 模板文件默认是 `public/subpage.html`\r\n+    // 如果不存在，就是 `public/index.html`.\r\n+    // 输出文件默认是 `subpage.html`.\r\n+    subpage: 'src/main.js'　　　　/*注意这个是*/\r\n+  },\r\n+\r\n+  // 是否在保存的时候使用 `eslint-loader` 进行检查。\r\n+  // 有效的值：`ture` | `false` | `\"error\"`\r\n+  // 当设置为 `\"error\"` 时，检查出的错误会触发编译失败。\r\n+  lintOnSave: true,\r\n+\r\n+  // 使用带有浏览器内编译器的完整构建版本\r\n+  // 查阅 https://cn.vuejs.org/v2/guide/installation.html#运行时-编译器-vs-只包含运行时\r\n+  runtimeCompiler: false,\r\n+\r\n+  // babel-loader 默认会跳过 node_modules 依赖。\r\n+  // 通过这个选项可以显式转译一个依赖。\r\n+  transpileDependencies: [/* string or regex */],\r\n+\r\n+  // 是否为生产环境构建生成 source map？\r\n+  productionSourceMap: true,\r\n+\r\n+  // 调整内部的 webpack 配置。\r\n+  // 查阅 https://github.com/vuejs/vue-docs-zh-cn/blob/master/vue-cli/webpack.md\r\n+  chainWebpack: () => { },\r\n+  configureWebpack: () => { },\r\n+\r\n+  // CSS 相关选项\r\n+  css: {\r\n+    // 将组件内的 CSS 提取到一个单独的 CSS 文件 (只用在生产环境中)\r\n+    // 也可以是一个传递给 `extract-text-webpack-plugin` 的选项对象\r\n+    extract: true,\r\n+\r\n+    // 是否开启 CSS source map？\r\n+    sourceMap: false,\r\n+\r\n+    // 为预处理器的 loader 传递自定义选项。比如传递给\r\n+    // sass-loader 时，使用 `{ sass: { ... } }`。\r\n+    loaderOptions: {},\r\n+\r\n+    // 为所有的 CSS 及其预处理文件开启 CSS Modules。\r\n+    // 这个选项不会影响 `*.vue` 文件。\r\n+    modules: false\r\n+  },\r\n+\r\n+  // 在生产环境下为 Babel 和 TypeScript 使用 `thread-loader`\r\n+  // 在多核机器下会默认开启。\r\n+  parallel: require('os').cpus().length > 1,\r\n+\r\n+  // PWA 插件的选项。\r\n+  // 查阅 https://github.com/vuejs/vue-cli/tree/dev/packages/@vue/cli-plugin-pwa\r\n+  pwa: {},\r\n+\r\n+  // 配置 webpack-dev-server 行为。\r\n+  // devServer: {\r\n+  //   open: process.platform === 'darwin',\r\n+  //   host: '0.0.0.0',\r\n+  //   port: 8080,\r\n+  //   https: false,\r\n+  //   hotOnly: false,\r\n+  //   // 查阅 https://github.com/vuejs/vue-docs-zh-cn/blob/master/vue-cli/cli-service.md#配置代理\r\n+  //   proxy: {\r\n+  //     '/api': {\r\n+  //       target: 'http://localhost:8880',\r\n+  //       changeOrigin: true,\r\n+  //       secure: false,\r\n+  //       // ws: true,\r\n+  //       pathRewrite: {\r\n+  //         '^/api': '/static/mock'   // 请求数据路径别名,这里是注意将static/mock放入public文件夹\r\n+  //       }\r\n+  //     }\r\n+  //   },\r\n+  //   before: app => { }\r\n+  // },\r\n+\r\n+  // 三方插件的选项\r\n+  pluginOptions: {\r\n+    // ...\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1646381317019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,103 +1,165 @@\n+const path = require(\"path\");\r\n+const UglifyPlugin = require(\"uglifyjs-webpack-plugin\");\r\n module.exports = {\r\n-  // 项目部署的基础路径\r\n-  publicPath: './',\r\n-\r\n-  // 将构建好的文件输出到哪里（或者说将编译的文件）\r\n-  outputDir: 'dist',\r\n-\r\n-  // 放置静态资源的地方 (js/css/img/font/...)\r\n-  assetsDir: '',\r\n-\r\n-  // 用于多页配置，默认是 undefined\r\n-  pages: {\r\n-    index: {\r\n-      // 入口文件\r\n-      entry: 'src/main.js',　　/*这个是根入口文件*/\r\n-      // 模板文件\r\n-      template: 'public/index.html',\r\n-      // 输出文件\r\n-      filename: 'index.html',\r\n-      // 页面title\r\n-      title: 'Index Page'\r\n-    },\r\n-    // 简写格式\r\n-    // 模板文件默认是 `public/subpage.html`\r\n-    // 如果不存在，就是 `public/index.html`.\r\n-    // 输出文件默认是 `subpage.html`.\r\n-    subpage: 'src/main.js'　　　　/*注意这个是*/\r\n-  },\r\n-\r\n-  // 是否在保存的时候使用 `eslint-loader` 进行检查。\r\n-  // 有效的值：`ture` | `false` | `\"error\"`\r\n-  // 当设置为 `\"error\"` 时，检查出的错误会触发编译失败。\r\n+  // 基本路径\r\n+  /* 部署生产环境和开发环境下的URL：可对当前环境进行区分，baseUrl 从 Vue CLI 3.3 起已弃用，要使用publicPath */\r\n+  /* baseUrl: process.env.NODE_ENV === 'production' ? './' : '/' */\r\n+  publicPath: process.env.NODE_ENV === \"production\" ? \"./\" : \"./\",\r\n+  // 输出文件目录\r\n+  outputDir: \"dist\",\r\n+  // eslint-loader 是否在保存的时候检查\r\n   lintOnSave: true,\r\n-\r\n-  // 使用带有浏览器内编译器的完整构建版本\r\n-  // 查阅 https://cn.vuejs.org/v2/guide/installation.html#运行时-编译器-vs-只包含运行时\r\n-  runtimeCompiler: false,\r\n-\r\n-  // babel-loader 默认会跳过 node_modules 依赖。\r\n-  // 通过这个选项可以显式转译一个依赖。\r\n-  transpileDependencies: [/* string or regex */],\r\n-\r\n-  // 是否为生产环境构建生成 source map？\r\n-  productionSourceMap: true,\r\n-\r\n+  // use the full build with in-browser compiler?\r\n+  // https://vuejs.org/v2/guide/installation.html#Runtime-Compiler-vs-Runtime-only\r\n+  //   compiler: false,\r\n+  runtimeCompiler: true, //关键点在这\r\n   // 调整内部的 webpack 配置。\r\n-  // 查阅 https://github.com/vuejs/vue-docs-zh-cn/blob/master/vue-cli/webpack.md\r\n+  // 查阅 https://github.com/vuejs/vue-doc-zh-cn/vue-cli/webpack.md\r\n+  // webpack配置\r\n+  // see https://github.com/vuejs/vue-cli/blob/dev/docs/webpack.md\r\n   chainWebpack: () => { },\r\n-  configureWebpack: () => { },\r\n+  configureWebpack: config => {\r\n+    if (process.env.NODE_ENV === \"production\") {\r\n+      // 为生产环境修改配置...\r\n+      config.mode = \"production\";\r\n+      // 将每个依赖包打包成单独的js文件\r\n+      var optimization = {\r\n+        runtimeChunk: \"single\",\r\n+        splitChunks: {\r\n+          chunks: \"all\",\r\n+          maxInitialRequests: Infinity,\r\n+          minSize: 20000, // 依赖包超过20000bit将被单独打包\r\n+          cacheGroups: {\r\n+            vendor: {\r\n+              test: /[\\\\/]node_modules[\\\\/]/,\r\n+              name(module) {\r\n+                // get the name. E.g. node_modules/packageName/not/this/part.js\r\n+                // or node_modules/packageName\r\n+                const packageName = module.context.match(\r\n+                  /[\\\\/]node_modules[\\\\/](.*?)([\\\\/]|$)/\r\n+                )[1];\r\n+                // npm package names are URL-safe, but some servers don't like @ symbols\r\n+                return `npm.${packageName.replace(\"@\", \"\")}`;\r\n+              }\r\n+            }\r\n+          }\r\n+        },\r\n+        minimizer: [\r\n+          new UglifyPlugin({\r\n+            uglifyOptions: {\r\n+              compress: {\r\n+                warnings: false,\r\n+                drop_console: true, // console\r\n+                drop_debugger: false,\r\n+                pure_funcs: [\"console.log\"] // 移除console\r\n+              }\r\n+            }\r\n+          })\r\n+        ]\r\n\\ No newline at end of file\n+      };\r\n+      Object.assign(config, {\r\n+        optimization\r\n+      });\r\n+    } else {\r\n+      // 为开发环境修改配置...\r\n+      config.mode = \"development\";\r\n+      var optimization2 = {\r\n+        runtimeChunk: \"single\",\r\n+        splitChunks: {\r\n+          chunks: \"all\",\r\n+          maxInitialRequests: Infinity,\r\n+          minSize: 20000, // 依赖包超过20000bit将被单独打包\r\n+          cacheGroups: {\r\n+            vendor: {\r\n+              test: /[\\\\/]node_modules[\\\\/]/,\r\n+              name(module) {\r\n+                // get the name. E.g. node_modules/packageName/not/this/part.js\r\n+                // or node_modules/packageName\r\n+                const packageName = module.context.match(\r\n+                  /[\\\\/]node_modules[\\\\/](.*?)([\\\\/]|$)/\r\n+                )[1];\r\n+                // npm package names are URL-safe, but some servers don't like @ symbols\r\n+                return `npm.${packageName.replace(\"@\", \"\")}`;\r\n+              }\r\n+            }\r\n+          }\r\n+        }\r\n+      };\r\n+    }\r\n+    Object.assign(config, {\r\n+      // 开发生产共同配置\r\n \r\n-  // CSS 相关选项\r\n+      // externals: {\r\n+      //   'vue': 'Vue',\r\n+      //   'element-ui': 'ELEMENT',\r\n+      //   'vue-router': 'VueRouter',\r\n+      //   'vuex': 'Vuex'\r\n+      // } // 防止将某些 import 的包(package)打包到 bundle 中，而是在运行时(runtime)再去从外部获取这些扩展依赖(用于csdn引入)\r\n+      resolve: {\r\n+        extensions: [\".js\", \".vue\", \".json\"], //文件优先解析后缀名顺序\r\n+        alias: {\r\n+          \"@\": path.resolve(__dirname, \"./src\"),\r\n+          \"@c\": path.resolve(__dirname, \"./src/components\"),\r\n+          \"@v\": path.resolve(__dirname, \"./src/views\"),\r\n+          \"@u\": path.resolve(__dirname, \"./src/utils\"),\r\n+          \"@s\": path.resolve(__dirname, \"./src/service\")\r\n+        }, // 别名配置\r\n+        plugins: []\r\n+      },\r\n+      optimization: optimization2\r\n+    });\r\n+  },\r\n+  // vue-loader 配置项\r\n+  // https://vue-loader.vuejs.org/en/options.html\r\n+  // vueLoader: {},\r\n+  // 生产环境是否生成 sourceMap 文件\r\n+  productionSourceMap: false,\r\n+  // css相关配置\r\n   css: {\r\n-    // 将组件内的 CSS 提取到一个单独的 CSS 文件 (只用在生产环境中)\r\n-    // 也可以是一个传递给 `extract-text-webpack-plugin` 的选项对象\r\n-    extract: true,\r\n-\r\n-    // 是否开启 CSS source map？\r\n+    // 是否使用css分离插件 ExtractTextPlugin\r\n+    // extract: true, //注释css热更新生效\r\n+    // 开启 CSS source maps?\r\n     sourceMap: false,\r\n-\r\n-    // 为预处理器的 loader 传递自定义选项。比如传递给\r\n-    // sass-loader 时，使用 `{ sass: { ... } }`。\r\n+    // css预设器配置项\r\n     loaderOptions: {},\r\n-\r\n-    // 为所有的 CSS 及其预处理文件开启 CSS Modules。\r\n-    // 这个选项不会影响 `*.vue` 文件。\r\n+    // 启用 CSS modules for all css / pre-processor files.\r\n     modules: false\r\n   },\r\n-\r\n-  // 在生产环境下为 Babel 和 TypeScript 使用 `thread-loader`\r\n-  // 在多核机器下会默认开启。\r\n-  parallel: require('os').cpus().length > 1,\r\n-\r\n-  // PWA 插件的选项。\r\n-  // 查阅 https://github.com/vuejs/vue-cli/tree/dev/packages/@vue/cli-plugin-pwa\r\n+  // use thread-loader for babel & TS in production build\r\n+  // enabled by default if the machine has more than 1 cores\r\n+  parallel: require(\"os\").cpus().length > 1,\r\n+  // 是否启用dll\r\n+  // See https://github.com/vuejs/vue-cli/blob/dev/docs/cli-service.md#dll-mode\r\n+  // dll: false,\r\n+  // PWA 插件相关配置\r\n+  // see https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-pwa\r\n   pwa: {},\r\n-\r\n-  // 配置 webpack-dev-server 行为。\r\n+  // webpack-dev-server 相关配置\r\n   // devServer: {\r\n-  //   open: process.platform === 'darwin',\r\n-  //   host: '0.0.0.0',\r\n+  //   /* 自动打开浏览器 */\r\n+  //   open: false,\r\n+  //   // host: \"192.168.0.137\",\r\n+  //   host: \"0.0.0.0\", //局域网和本地访问\r\n+  //   //host: \"192.168.1.137\",\r\n   //   port: 8080,\r\n   //   https: false,\r\n   //   hotOnly: false,\r\n-  //   // 查阅 https://github.com/vuejs/vue-docs-zh-cn/blob/master/vue-cli/cli-service.md#配置代理\r\n+  //   /* 使用代理 */\r\n   //   proxy: {\r\n-  //     '/api': {\r\n-  //       target: 'http://localhost:8880',\r\n+  //     \"/api\": {\r\n+  //       /* 目标代理服务器地址 */\r\n+  //       // target: \"http://192.168.0.106:8080/\",\r\n+  //       target: \"http://192.168.1.126:8080/\", //阳洋\r\n+  //       /* 允许跨域 */\r\n   //       changeOrigin: true,\r\n-  //       secure: false,\r\n-  //       // ws: true,\r\n+  //       ws: true,\r\n   //       pathRewrite: {\r\n-  //         '^/api': '/static/mock'   // 请求数据路径别名,这里是注意将static/mock放入public文件夹\r\n+  //         \"^/api\": \"\"\r\n   //       }\r\n   //     }\r\n   //   },\r\n-  //   before: app => { }\r\n+  //   before: () => { }\r\n   // },\r\n-\r\n-  // 三方插件的选项\r\n-  pluginOptions: {\r\n-    // ...\r\n-  }\r\n-}\n+  // 第三方插件配置\r\n+  pluginOptions: {}\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1646381592186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,165 +1,10 @@\n-const path = require(\"path\");\r\n-const UglifyPlugin = require(\"uglifyjs-webpack-plugin\");\r\n+let path = require('path')\r\n+function resolve(dir) {\r\n+  return path.join(__dirname, dir)\r\n+}\r\n module.exports = {\r\n-  // 基本路径\r\n-  /* 部署生产环境和开发环境下的URL：可对当前环境进行区分，baseUrl 从 Vue CLI 3.3 起已弃用，要使用publicPath */\r\n-  /* baseUrl: process.env.NODE_ENV === 'production' ? './' : '/' */\r\n-  publicPath: process.env.NODE_ENV === \"production\" ? \"./\" : \"./\",\r\n-  // 输出文件目录\r\n-  outputDir: \"dist\",\r\n-  // eslint-loader 是否在保存的时候检查\r\n-  lintOnSave: true,\r\n-  // use the full build with in-browser compiler?\r\n-  // https://vuejs.org/v2/guide/installation.html#Runtime-Compiler-vs-Runtime-only\r\n-  //   compiler: false,\r\n-  runtimeCompiler: true, //关键点在这\r\n-  // 调整内部的 webpack 配置。\r\n-  // 查阅 https://github.com/vuejs/vue-doc-zh-cn/vue-cli/webpack.md\r\n-  // webpack配置\r\n-  // see https://github.com/vuejs/vue-cli/blob/dev/docs/webpack.md\r\n-  chainWebpack: () => { },\r\n-  configureWebpack: config => {\r\n-    if (process.env.NODE_ENV === \"production\") {\r\n-      // 为生产环境修改配置...\r\n-      config.mode = \"production\";\r\n-      // 将每个依赖包打包成单独的js文件\r\n-      var optimization = {\r\n-        runtimeChunk: \"single\",\r\n-        splitChunks: {\r\n-          chunks: \"all\",\r\n-          maxInitialRequests: Infinity,\r\n-          minSize: 20000, // 依赖包超过20000bit将被单独打包\r\n-          cacheGroups: {\r\n-            vendor: {\r\n-              test: /[\\\\/]node_modules[\\\\/]/,\r\n-              name(module) {\r\n-                // get the name. E.g. node_modules/packageName/not/this/part.js\r\n-                // or node_modules/packageName\r\n-                const packageName = module.context.match(\r\n-                  /[\\\\/]node_modules[\\\\/](.*?)([\\\\/]|$)/\r\n-                )[1];\r\n-                // npm package names are URL-safe, but some servers don't like @ symbols\r\n-                return `npm.${packageName.replace(\"@\", \"\")}`;\r\n-              }\r\n-            }\r\n-          }\r\n-        },\r\n-        minimizer: [\r\n-          new UglifyPlugin({\r\n-            uglifyOptions: {\r\n-              compress: {\r\n-                warnings: false,\r\n-                drop_console: true, // console\r\n-                drop_debugger: false,\r\n-                pure_funcs: [\"console.log\"] // 移除console\r\n-              }\r\n-            }\r\n-          })\r\n-        ]\r\n-      };\r\n-      Object.assign(config, {\r\n-        optimization\r\n-      });\r\n-    } else {\r\n-      // 为开发环境修改配置...\r\n-      config.mode = \"development\";\r\n-      var optimization2 = {\r\n-        runtimeChunk: \"single\",\r\n-        splitChunks: {\r\n-          chunks: \"all\",\r\n-          maxInitialRequests: Infinity,\r\n-          minSize: 20000, // 依赖包超过20000bit将被单独打包\r\n-          cacheGroups: {\r\n-            vendor: {\r\n-              test: /[\\\\/]node_modules[\\\\/]/,\r\n-              name(module) {\r\n-                // get the name. E.g. node_modules/packageName/not/this/part.js\r\n-                // or node_modules/packageName\r\n-                const packageName = module.context.match(\r\n-                  /[\\\\/]node_modules[\\\\/](.*?)([\\\\/]|$)/\r\n-                )[1];\r\n-                // npm package names are URL-safe, but some servers don't like @ symbols\r\n-                return `npm.${packageName.replace(\"@\", \"\")}`;\r\n-              }\r\n-            }\r\n-          }\r\n-        }\r\n-      };\r\n-    }\r\n-    Object.assign(config, {\r\n-      // 开发生产共同配置\r\n-\r\n-      // externals: {\r\n-      //   'vue': 'Vue',\r\n-      //   'element-ui': 'ELEMENT',\r\n-      //   'vue-router': 'VueRouter',\r\n-      //   'vuex': 'Vuex'\r\n-      // } // 防止将某些 import 的包(package)打包到 bundle 中，而是在运行时(runtime)再去从外部获取这些扩展依赖(用于csdn引入)\r\n-      resolve: {\r\n-        extensions: [\".js\", \".vue\", \".json\"], //文件优先解析后缀名顺序\r\n-        alias: {\r\n-          \"@\": path.resolve(__dirname, \"./src\"),\r\n-          \"@c\": path.resolve(__dirname, \"./src/components\"),\r\n-          \"@v\": path.resolve(__dirname, \"./src/views\"),\r\n-          \"@u\": path.resolve(__dirname, \"./src/utils\"),\r\n-          \"@s\": path.resolve(__dirname, \"./src/service\")\r\n-        }, // 别名配置\r\n-        plugins: []\r\n-      },\r\n-      optimization: optimization2\r\n-    });\r\n-  },\r\n-  // vue-loader 配置项\r\n-  // https://vue-loader.vuejs.org/en/options.html\r\n-  // vueLoader: {},\r\n-  // 生产环境是否生成 sourceMap 文件\r\n-  productionSourceMap: false,\r\n-  // css相关配置\r\n-  css: {\r\n-    // 是否使用css分离插件 ExtractTextPlugin\r\n-    // extract: true, //注释css热更新生效\r\n-    // 开启 CSS source maps?\r\n-    sourceMap: false,\r\n-    // css预设器配置项\r\n-    loaderOptions: {},\r\n-    // 启用 CSS modules for all css / pre-processor files.\r\n-    modules: false\r\n-  },\r\n-  // use thread-loader for babel & TS in production build\r\n-  // enabled by default if the machine has more than 1 cores\r\n-  parallel: require(\"os\").cpus().length > 1,\r\n-  // 是否启用dll\r\n-  // See https://github.com/vuejs/vue-cli/blob/dev/docs/cli-service.md#dll-mode\r\n-  // dll: false,\r\n-  // PWA 插件相关配置\r\n-  // see https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-pwa\r\n-  pwa: {},\r\n-  // webpack-dev-server 相关配置\r\n-  // devServer: {\r\n-  //   /* 自动打开浏览器 */\r\n-  //   open: false,\r\n-  //   // host: \"192.168.0.137\",\r\n-  //   host: \"0.0.0.0\", //局域网和本地访问\r\n-  //   //host: \"192.168.1.137\",\r\n-  //   port: 8080,\r\n-  //   https: false,\r\n-  //   hotOnly: false,\r\n-  //   /* 使用代理 */\r\n-  //   proxy: {\r\n-  //     \"/api\": {\r\n-  //       /* 目标代理服务器地址 */\r\n-  //       // target: \"http://192.168.0.106:8080/\",\r\n-  //       target: \"http://192.168.1.126:8080/\", //阳洋\r\n-  //       /* 允许跨域 */\r\n-  //       changeOrigin: true,\r\n-  //       ws: true,\r\n-  //       pathRewrite: {\r\n-  //         \"^/api\": \"\"\r\n-  //       }\r\n-  //     }\r\n-  //   },\r\n-  //   before: () => { }\r\n\\ No newline at end of file\n-  // },\r\n-  // 第三方插件配置\r\n-  pluginOptions: {}\r\n-};\n+  chainWebpack: config => {\r\n+    config.resolve.alias\r\n+      .set('@', resolve('src'))\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1646383710630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,46 @@\n-let path = require('path')\r\n-function resolve(dir) {\r\n-  return path.join(__dirname, dir)\r\n-}\r\n-module.exports = {\r\n-  chainWebpack: config => {\r\n-    config.resolve.alias\r\n-      .set('@', resolve('src'))\r\n+import { defineConfig } from 'vite'\r\n+import vue from '@vitejs/plugin-vue'\r\n+import { resolve } from 'path'\r\n+\r\n+const pathResolve = (dir: string) => resolve(__dirname, dir)\r\n+\r\n+// https://vitejs.dev/config/\r\n+export default defineConfig({\r\n+  plugins: [vue()],\r\n+  build: {\r\n+    outDir: 'dist',     // 指定打包路径，默认为项目根目录下的 dist 目录\r\n+    terserOptions: {\r\n+      compress: {\r\n+        keep_infinity: true,  // 防止 Infinity 被压缩成 1/0，这可能会导致 Chrome 上的性能问题\r\n+        drop_console: true, // 生产环境去除 console\r\n+        drop_debugger: true // 生产环境去除 debugger\r\n+      },\r\n+    },\r\n+    chunkSizeWarningLimit: 1500 // chunk 大小警告的限制（以 kbs 为单位）\r\n+  },\r\n+  resolve: {\r\n+    alias: {\r\n+      '@': pathResolve('./src'), // 设置 `@` 指向 `src` 目录\r\n+      views: pathResolve('./src/views'),\r\n+      components: pathResolve('./src/components'),\r\n+      assets: pathResolve('./src/assets'),\r\n+    },\r\n+  },\r\n+  base: './', // 设置公共基础路径\r\n+  server: {\r\n+    port: 4000, // 设置服务启动端口号\r\n+    open: true, // 设置服务启动时是否自动打开浏览器\r\n+    cors: true, // 允许跨域\r\n+\r\n+    // 设置代理，根据我们项目实际情况配置\r\n+    proxy: {\r\n+      '/api': {\r\n+        target: 'http://127.0.0.1:8000',\r\n+        changeOrigin: true,\r\n+        secure: false,\r\n+        rewrite: path => path.replace(/^/api /, '')\r\n+      }\r\n+    }\r\n   }\r\n-}\r\n+})\r\n+\r\n"
                },
                {
                    "date": 1646383738878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import { defineConfig } from 'vite'\r\n import vue from '@vitejs/plugin-vue'\r\n import { resolve } from 'path'\r\n \r\n-const pathResolve = (dir: string) => resolve(__dirname, dir)\r\n+const pathResolve = (dir) => resolve(__dirname, dir)\r\n \r\n // https://vitejs.dev/config/\r\n export default defineConfig({\r\n   plugins: [vue()],\r\n"
                },
                {
                    "date": 1646383783849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n       '/api': {\r\n         target: 'http://127.0.0.1:8000',\r\n         changeOrigin: true,\r\n         secure: false,\r\n-        rewrite: path => path.replace(/^/api /, '')\r\n+        // rewrite: path => path.replace(/^/api /, '')\r\n       }\r\n     }\r\n   }\r\n })\r\n"
                },
                {
                    "date": 1646383841740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,46 +1,10 @@\n-import { defineConfig } from 'vite'\r\n-import vue from '@vitejs/plugin-vue'\r\n-import { resolve } from 'path'\r\n-\r\n-const pathResolve = (dir) => resolve(__dirname, dir)\r\n-\r\n-// https://vitejs.dev/config/\r\n-export default defineConfig({\r\n-  plugins: [vue()],\r\n-  build: {\r\n-    outDir: 'dist',     // 指定打包路径，默认为项目根目录下的 dist 目录\r\n-    terserOptions: {\r\n-      compress: {\r\n-        keep_infinity: true,  // 防止 Infinity 被压缩成 1/0，这可能会导致 Chrome 上的性能问题\r\n-        drop_console: true, // 生产环境去除 console\r\n-        drop_debugger: true // 生产环境去除 debugger\r\n-      },\r\n-    },\r\n-    chunkSizeWarningLimit: 1500 // chunk 大小警告的限制（以 kbs 为单位）\r\n-  },\r\n-  resolve: {\r\n-    alias: {\r\n-      '@': pathResolve('./src'), // 设置 `@` 指向 `src` 目录\r\n-      views: pathResolve('./src/views'),\r\n-      components: pathResolve('./src/components'),\r\n-      assets: pathResolve('./src/assets'),\r\n-    },\r\n-  },\r\n-  base: './', // 设置公共基础路径\r\n-  server: {\r\n-    port: 4000, // 设置服务启动端口号\r\n-    open: true, // 设置服务启动时是否自动打开浏览器\r\n-    cors: true, // 允许跨域\r\n-\r\n-    // 设置代理，根据我们项目实际情况配置\r\n-    proxy: {\r\n-      '/api': {\r\n-        target: 'http://127.0.0.1:8000',\r\n-        changeOrigin: true,\r\n-        secure: false,\r\n-        // rewrite: path => path.replace(/^/api /, '')\r\n-      }\r\n-    }\r\n+let path = require('path')\r\n+function resolve(dir) {\r\n+  return path.join(__dirname, dir)\r\n+}\r\n+module.exports = {\r\n+  chainWebpack: config => {\r\n+    config.resolve.alias\r\n+      .set('@', resolve('src'))\r\n   }\r\n-})\r\n-\r\n+}\r\n"
                },
                {
                    "date": 1646383865603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,165 @@\n-let path = require('path')\r\n-function resolve(dir) {\r\n-  return path.join(__dirname, dir)\r\n-}\r\n+const path = require(\"path\");\r\n+const UglifyPlugin = require(\"uglifyjs-webpack-plugin\");\r\n module.exports = {\r\n-  chainWebpack: config => {\r\n-    config.resolve.alias\r\n-      .set('@', resolve('src'))\r\n-  }\r\n-}\r\n+  // 基本路径\r\n+  /* 部署生产环境和开发环境下的URL：可对当前环境进行区分，baseUrl 从 Vue CLI 3.3 起已弃用，要使用publicPath */\r\n+  /* baseUrl: process.env.NODE_ENV === 'production' ? './' : '/' */\r\n+  publicPath: process.env.NODE_ENV === \"production\" ? \"./\" : \"./\",\r\n+  // 输出文件目录\r\n+  outputDir: \"dist\",\r\n+  // eslint-loader 是否在保存的时候检查\r\n+  lintOnSave: true,\r\n+  // use the full build with in-browser compiler?\r\n+  // https://vuejs.org/v2/guide/installation.html#Runtime-Compiler-vs-Runtime-only\r\n+  //   compiler: false,\r\n+  runtimeCompiler: true, //关键点在这\r\n+  // 调整内部的 webpack 配置。\r\n+  // 查阅 https://github.com/vuejs/vue-doc-zh-cn/vue-cli/webpack.md\r\n+  // webpack配置\r\n+  // see https://github.com/vuejs/vue-cli/blob/dev/docs/webpack.md\r\n+  chainWebpack: () => { },\r\n+  configureWebpack: config => {\r\n+    if (process.env.NODE_ENV === \"production\") {\r\n+      // 为生产环境修改配置...\r\n+      config.mode = \"production\";\r\n+      // 将每个依赖包打包成单独的js文件\r\n+      var optimization = {\r\n+        runtimeChunk: \"single\",\r\n+        splitChunks: {\r\n+          chunks: \"all\",\r\n+          maxInitialRequests: Infinity,\r\n+          minSize: 20000, // 依赖包超过20000bit将被单独打包\r\n+          cacheGroups: {\r\n+            vendor: {\r\n+              test: /[\\\\/]node_modules[\\\\/]/,\r\n+              name(module) {\r\n+                // get the name. E.g. node_modules/packageName/not/this/part.js\r\n+                // or node_modules/packageName\r\n+                const packageName = module.context.match(\r\n+                  /[\\\\/]node_modules[\\\\/](.*?)([\\\\/]|$)/\r\n+                )[1];\r\n+                // npm package names are URL-safe, but some servers don't like @ symbols\r\n+                return `npm.${packageName.replace(\"@\", \"\")}`;\r\n+              }\r\n+            }\r\n+          }\r\n+        },\r\n+        minimizer: [\r\n+          new UglifyPlugin({\r\n+            uglifyOptions: {\r\n+              compress: {\r\n+                warnings: false,\r\n+                drop_console: true, // console\r\n+                drop_debugger: false,\r\n+                pure_funcs: [\"console.log\"] // 移除console\r\n+              }\r\n+            }\r\n+          })\r\n+        ]\r\n+      };\r\n+      Object.assign(config, {\r\n+        optimization\r\n+      });\r\n+    } else {\r\n+      // 为开发环境修改配置...\r\n+      config.mode = \"development\";\r\n+      var optimization2 = {\r\n+        runtimeChunk: \"single\",\r\n+        splitChunks: {\r\n+          chunks: \"all\",\r\n+          maxInitialRequests: Infinity,\r\n+          minSize: 20000, // 依赖包超过20000bit将被单独打包\r\n+          cacheGroups: {\r\n+            vendor: {\r\n+              test: /[\\\\/]node_modules[\\\\/]/,\r\n+              name(module) {\r\n+                // get the name. E.g. node_modules/packageName/not/this/part.js\r\n+                // or node_modules/packageName\r\n+                const packageName = module.context.match(\r\n+                  /[\\\\/]node_modules[\\\\/](.*?)([\\\\/]|$)/\r\n+                )[1];\r\n+                // npm package names are URL-safe, but some servers don't like @ symbols\r\n+                return `npm.${packageName.replace(\"@\", \"\")}`;\r\n+              }\r\n+            }\r\n+          }\r\n+        }\r\n+      };\r\n+    }\r\n+    Object.assign(config, {\r\n+      // 开发生产共同配置\r\n+\r\n+      // externals: {\r\n+      //   'vue': 'Vue',\r\n+      //   'element-ui': 'ELEMENT',\r\n+      //   'vue-router': 'VueRouter',\r\n+      //   'vuex': 'Vuex'\r\n+      // } // 防止将某些 import 的包(package)打包到 bundle 中，而是在运行时(runtime)再去从外部获取这些扩展依赖(用于csdn引入)\r\n+      resolve: {\r\n+        extensions: [\".js\", \".vue\", \".json\"], //文件优先解析后缀名顺序\r\n+        alias: {\r\n+          \"@\": path.resolve(__dirname, \"./src\"),\r\n+          \"@c\": path.resolve(__dirname, \"./src/components\"),\r\n+          \"@v\": path.resolve(__dirname, \"./src/views\"),\r\n+          \"@u\": path.resolve(__dirname, \"./src/utils\"),\r\n+          \"@s\": path.resolve(__dirname, \"./src/service\")\r\n+        }, // 别名配置\r\n+        plugins: []\r\n+      },\r\n+      optimization: optimization2\r\n+    });\r\n+  },\r\n+  // vue-loader 配置项\r\n+  // https://vue-loader.vuejs.org/en/options.html\r\n+  // vueLoader: {},\r\n+  // 生产环境是否生成 sourceMap 文件\r\n+  productionSourceMap: false,\r\n+  // css相关配置\r\n+  css: {\r\n+    // 是否使用css分离插件 ExtractTextPlugin\r\n+    // extract: true, //注释css热更新生效\r\n+    // 开启 CSS source maps?\r\n+    sourceMap: false,\r\n+    // css预设器配置项\r\n+    loaderOptions: {},\r\n+    // 启用 CSS modules for all css / pre-processor files.\r\n+    modules: false\r\n+  },\r\n+  // use thread-loader for babel & TS in production build\r\n+  // enabled by default if the machine has more than 1 cores\r\n+  parallel: require(\"os\").cpus().length > 1,\r\n+  // 是否启用dll\r\n+  // See https://github.com/vuejs/vue-cli/blob/dev/docs/cli-service.md#dll-mode\r\n+  // dll: false,\r\n+  // PWA 插件相关配置\r\n+  // see https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-pwa\r\n+  pwa: {},\r\n+  // webpack-dev-server 相关配置\r\n+  devServer: {\r\n+    /* 自动打开浏览器 */\r\n+    open: false,\r\n+    // host: \"192.168.0.137\",\r\n+    host: \"0.0.0.0\", //局域网和本地访问\r\n+    //host: \"192.168.1.137\",\r\n+    port: 8080,\r\n+    https: false,\r\n+    hotOnly: false,\r\n+    /* 使用代理 */\r\n+    proxy: {\r\n+      \"/api\": {\r\n+        /* 目标代理服务器地址 */\r\n+        // target: \"http://192.168.0.106:8080/\",\r\n+        target: \"http://192.168.1.126:8080/\", //阳洋\r\n+        /* 允许跨域 */\r\n+        changeOrigin: true,\r\n+        ws: true,\r\n+        pathRewrite: {\r\n+          \"^/api\": \"\"\r\n+        }\r\n+      }\r\n+    },\r\n+    before: () => { }\r\n+  },\r\n+  // 第三方插件配置\r\n+  pluginOptions: {}\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1646383880731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,165 +1,46 @@\n-const path = require(\"path\");\r\n-const UglifyPlugin = require(\"uglifyjs-webpack-plugin\");\r\n-module.exports = {\r\n-  // 基本路径\r\n-  /* 部署生产环境和开发环境下的URL：可对当前环境进行区分，baseUrl 从 Vue CLI 3.3 起已弃用，要使用publicPath */\r\n-  /* baseUrl: process.env.NODE_ENV === 'production' ? './' : '/' */\r\n-  publicPath: process.env.NODE_ENV === \"production\" ? \"./\" : \"./\",\r\n-  // 输出文件目录\r\n-  outputDir: \"dist\",\r\n-  // eslint-loader 是否在保存的时候检查\r\n-  lintOnSave: true,\r\n-  // use the full build with in-browser compiler?\r\n-  // https://vuejs.org/v2/guide/installation.html#Runtime-Compiler-vs-Runtime-only\r\n-  //   compiler: false,\r\n-  runtimeCompiler: true, //关键点在这\r\n-  // 调整内部的 webpack 配置。\r\n-  // 查阅 https://github.com/vuejs/vue-doc-zh-cn/vue-cli/webpack.md\r\n-  // webpack配置\r\n-  // see https://github.com/vuejs/vue-cli/blob/dev/docs/webpack.md\r\n-  chainWebpack: () => { },\r\n-  configureWebpack: config => {\r\n-    if (process.env.NODE_ENV === \"production\") {\r\n-      // 为生产环境修改配置...\r\n-      config.mode = \"production\";\r\n-      // 将每个依赖包打包成单独的js文件\r\n-      var optimization = {\r\n-        runtimeChunk: \"single\",\r\n-        splitChunks: {\r\n-          chunks: \"all\",\r\n-          maxInitialRequests: Infinity,\r\n-          minSize: 20000, // 依赖包超过20000bit将被单独打包\r\n-          cacheGroups: {\r\n-            vendor: {\r\n-              test: /[\\\\/]node_modules[\\\\/]/,\r\n-              name(module) {\r\n-                // get the name. E.g. node_modules/packageName/not/this/part.js\r\n-                // or node_modules/packageName\r\n-                const packageName = module.context.match(\r\n-                  /[\\\\/]node_modules[\\\\/](.*?)([\\\\/]|$)/\r\n-                )[1];\r\n-                // npm package names are URL-safe, but some servers don't like @ symbols\r\n-                return `npm.${packageName.replace(\"@\", \"\")}`;\r\n-              }\r\n-            }\r\n-          }\r\n-        },\r\n-        minimizer: [\r\n-          new UglifyPlugin({\r\n-            uglifyOptions: {\r\n-              compress: {\r\n-                warnings: false,\r\n-                drop_console: true, // console\r\n-                drop_debugger: false,\r\n-                pure_funcs: [\"console.log\"] // 移除console\r\n-              }\r\n-            }\r\n-          })\r\n-        ]\r\n-      };\r\n-      Object.assign(config, {\r\n-        optimization\r\n-      });\r\n-    } else {\r\n-      // 为开发环境修改配置...\r\n-      config.mode = \"development\";\r\n-      var optimization2 = {\r\n-        runtimeChunk: \"single\",\r\n-        splitChunks: {\r\n-          chunks: \"all\",\r\n-          maxInitialRequests: Infinity,\r\n-          minSize: 20000, // 依赖包超过20000bit将被单独打包\r\n-          cacheGroups: {\r\n-            vendor: {\r\n-              test: /[\\\\/]node_modules[\\\\/]/,\r\n-              name(module) {\r\n-                // get the name. E.g. node_modules/packageName/not/this/part.js\r\n-                // or node_modules/packageName\r\n-                const packageName = module.context.match(\r\n-                  /[\\\\/]node_modules[\\\\/](.*?)([\\\\/]|$)/\r\n-                )[1];\r\n-                // npm package names are URL-safe, but some servers don't like @ symbols\r\n-                return `npm.${packageName.replace(\"@\", \"\")}`;\r\n-              }\r\n-            }\r\n-          }\r\n-        }\r\n-      };\r\n-    }\r\n-    Object.assign(config, {\r\n-      // 开发生产共同配置\r\n+import { defineConfig } from 'vite'\r\n+import vue from '@vitejs/plugin-vue'\r\n+import { resolve } from 'path'\r\n \r\n-      // externals: {\r\n-      //   'vue': 'Vue',\r\n-      //   'element-ui': 'ELEMENT',\r\n-      //   'vue-router': 'VueRouter',\r\n-      //   'vuex': 'Vuex'\r\n-      // } // 防止将某些 import 的包(package)打包到 bundle 中，而是在运行时(runtime)再去从外部获取这些扩展依赖(用于csdn引入)\r\n-      resolve: {\r\n-        extensions: [\".js\", \".vue\", \".json\"], //文件优先解析后缀名顺序\r\n-        alias: {\r\n-          \"@\": path.resolve(__dirname, \"./src\"),\r\n-          \"@c\": path.resolve(__dirname, \"./src/components\"),\r\n-          \"@v\": path.resolve(__dirname, \"./src/views\"),\r\n-          \"@u\": path.resolve(__dirname, \"./src/utils\"),\r\n-          \"@s\": path.resolve(__dirname, \"./src/service\")\r\n-        }, // 别名配置\r\n-        plugins: []\r\n+const pathResolve = (dir) => resolve(__dirname, dir)\r\n+\r\n+// https://vitejs.dev/config/\r\n+export default defineConfig({\r\n+  plugins: [vue()],\r\n+  build: {\r\n+    outDir: 'dist',     // 指定打包路径，默认为项目根目录下的 dist 目录\r\n+    terserOptions: {\r\n+      compress: {\r\n+        keep_infinity: true,  // 防止 Infinity 被压缩成 1/0，这可能会导致 Chrome 上的性能问题\r\n+        drop_console: true, // 生产环境去除 console\r\n+        drop_debugger: true // 生产环境去除 debugger\r\n       },\r\n-      optimization: optimization2\r\n-    });\r\n+    },\r\n+    chunkSizeWarningLimit: 1500 // chunk 大小警告的限制（以 kbs 为单位）\r\n   },\r\n-  // vue-loader 配置项\r\n-  // https://vue-loader.vuejs.org/en/options.html\r\n-  // vueLoader: {},\r\n-  // 生产环境是否生成 sourceMap 文件\r\n-  productionSourceMap: false,\r\n-  // css相关配置\r\n-  css: {\r\n-    // 是否使用css分离插件 ExtractTextPlugin\r\n-    // extract: true, //注释css热更新生效\r\n-    // 开启 CSS source maps?\r\n-    sourceMap: false,\r\n-    // css预设器配置项\r\n-    loaderOptions: {},\r\n-    // 启用 CSS modules for all css / pre-processor files.\r\n-    modules: false\r\n+  resolve: {\r\n+    alias: {\r\n+      '@': pathResolve('./src'), // 设置 `@` 指向 `src` 目录\r\n+      views: pathResolve('./src/views'),\r\n+      components: pathResolve('./src/components'),\r\n+      assets: pathResolve('./src/assets'),\r\n+    },\r\n   },\r\n-  // use thread-loader for babel & TS in production build\r\n-  // enabled by default if the machine has more than 1 cores\r\n-  parallel: require(\"os\").cpus().length > 1,\r\n-  // 是否启用dll\r\n-  // See https://github.com/vuejs/vue-cli/blob/dev/docs/cli-service.md#dll-mode\r\n-  // dll: false,\r\n-  // PWA 插件相关配置\r\n-  // see https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-pwa\r\n-  pwa: {},\r\n-  // webpack-dev-server 相关配置\r\n-  devServer: {\r\n-    /* 自动打开浏览器 */\r\n-    open: false,\r\n-    // host: \"192.168.0.137\",\r\n\\ No newline at end of file\n-    host: \"0.0.0.0\", //局域网和本地访问\r\n-    //host: \"192.168.1.137\",\r\n-    port: 8080,\r\n-    https: false,\r\n-    hotOnly: false,\r\n-    /* 使用代理 */\r\n+  base: './', // 设置公共基础路径\r\n+  server: {\r\n+    port: 4000, // 设置服务启动端口号\r\n+    open: true, // 设置服务启动时是否自动打开浏览器\r\n+    cors: true, // 允许跨域\r\n+\r\n+    // 设置代理，根据我们项目实际情况配置\r\n     proxy: {\r\n-      \"/api\": {\r\n-        /* 目标代理服务器地址 */\r\n-        // target: \"http://192.168.0.106:8080/\",\r\n-        target: \"http://192.168.1.126:8080/\", //阳洋\r\n-        /* 允许跨域 */\r\n+      '/api': {\r\n+        target: 'http://127.0.0.1:8000',\r\n         changeOrigin: true,\r\n-        ws: true,\r\n-        pathRewrite: {\r\n-          \"^/api\": \"\"\r\n-        }\r\n+        secure: false,\r\n+        // rewrite: path => path.replace(/^/api /, '')\r\n       }\r\n-    },\r\n-    before: () => { }\r\n-  },\r\n-  // 第三方插件配置\r\n-  pluginOptions: {}\r\n-};\n+    }\r\n+  }\r\n+})\r\n+\r\n"
                }
            ],
            "date": 1646380540063,
            "name": "Commit-0",
            "content": "{\r\n  \"compilerOptions\": {\r\n    \"target\": \"es5\",\r\n      \"module\": \"esnext\",\r\n        \"baseUrl\": \"./\",\r\n          \"moduleResolution\": \"node\",\r\n            \"paths\": {\r\n      \"@/*\": [\r\n        \"src/*\"\r\n      ]\r\n    },\r\n    \"lib\": [\r\n      \"esnext\",\r\n      \"dom\",\r\n      \"dom.iterable\",\r\n      \"scripthost\"\r\n    ]\r\n  }\r\n}\r\n"
        }
    ]
}